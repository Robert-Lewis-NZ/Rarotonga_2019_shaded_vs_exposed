ggplot() +
geom_boxplot(aes(x = habitat, y = value)) +
facet_wrap(~ species, labeller = labeller(.multi_line = FALSE)) +
theme(aspect.ratio = 1) +
ylab("B2 Mean Brightness") +
xlab("Habitat")
View(specslong)
View(specs)
View(specslong)
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
ggplot(aes(wl, absorbance, colour = habitat, group = PAMID)) +
geom_line(aes(linetype = factor(replicate)))
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
ggplot(aes(wl, absorbance, colour = habitat, group = PAMID)) +
geom_line(aes(linetype = factor(replicate))) +
facet_wrap(~ species)
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
ggplot(aes(wl, absorbance, colour = habitat, group = PAMID)) +
geom_line() +
facet_wrap(~ species)
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
ggplot(aes(wl, absorbance, colour = habitat, group = PAMID)) +
geom_line(aes(linetype = factor(replicate))) +
facet_wrap(~ species)
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
ggplot(aes(wl, absorbance, colour = habitat, group = PAMID)) +
geom_line(aes(linetype = factor(replicate))) +
facet_wrap(~ species) +
scale_fill_identity()
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
ggplot(aes(wl, absorbance, colour = habitat, group = PAMID)) +
geom_line(aes(linetype = factor(replicate))) +
facet_wrap(~ species) +
scale_fill_identity() +
scale_x_wl_continuous() +
ylim(values = c(0.5, 1)) +
scale_colour_manual(values = c("black", "orange")) +
theme(aspect.ratio = 1)
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
ggplot(aes(wl, absorbance, colour = habitat, group = PAMID)) +
geom_line(aes(linetype = factor(replicate))) +
facet_wrap(~ species) +
scale_fill_identity() +
scale_x_wl_continuous() +
ylim(values = c(0.5, 1)) +
scale_colour_manual(values = c("black", "orange")) +
theme(aspect.ratio = 1)
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5))
View(specslong)
specslong
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5))
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line()
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line() +
geom_ribbon(aes(ymin = mean_absorbance - sem_absorbance, ymax = mean_absorbance + sem_absorbance), alpha = 0.3)
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line() +
geom_ribbon(aes(ymin = mean_absorbance - sem_absorbance, ymax = mean_absorbance + sem_absorbance), alpha = 0.3) +
facet_wrap(~ species, labeller = labeller(.multi_line = FALSE))
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line() +
geom_ribbon(aes(ymin = mean_absorbance - sem_absorbance, ymax = mean_absorbance + sem_absorbance), alpha = 0.3) +
facet_wrap(~ species, labeller = labeller(.multi_line = FALSE))
#### 2.4 Supplementary Figure X plot of spectra (means +- sd)
```{r}
# Plot means and error
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line() +
geom_ribbon(aes(ymin = mean_absorbance - sem_absorbance, ymax = mean_absorbance + sem_absorbance), alpha = 0.3) +
facet_wrap(~ species)
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line() +
geom_ribbon(aes(ymin = mean_absorbance - sem_absorbance, ymax = mean_absorbance + sem_absorbance), alpha = 0.3) +
facet_wrap(~ species, labeller = labeller(.multi_line = FALSE))
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line() +
geom_ribbon(aes(ymin = mean_absorbance - sem_absorbance, ymax = mean_absorbance + sem_absorbance), alpha = 0.3) +
facet_wrap(~ species, labeller = labeller(.multi_line = FALSE))
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line() +
geom_ribbon(aes(ymin = mean_absorbance - sem_absorbance, ymax = mean_absorbance + sem_absorbance), alpha = 0.3) +
facet_wrap(~ species, labeller = labeller(.multi_line = FALSE)) +
scale_x_wl_continuous()
specslong %>%
mutate(absorbance = 1-(reflectance/100)) %>% # Convert reflectance to absorbance
group_by(wl, genus, species, habitat) %>%
summarise(mean_absorbance = mean(absorbance),
sd_absorbance = sd(absorbance),
sem_absorbance = sd_absorbance/sqrt(5)) %>%
ggplot(aes(wl, mean_absorbance, colour = habitat, fill = habitat)) +
geom_line() +
geom_ribbon(aes(ymin = mean_absorbance - sem_absorbance, ymax = mean_absorbance + sem_absorbance), alpha = 0.3) +
facet_wrap(~ species, labeller = labeller(.multi_line = FALSE)) +
scale_x_wl_continuous() +
scale_colour_manual(values = c("black", "coral")) +
scale_fill_manual(values = c("black", "coral"))
specslong_De <- specslong %>%
mutate(De = 1-(reflectance/100)) %>%
filter(wl == 675 | wl == 750)
View(specslong_De)
specslong_De <- specslong %>%
mutate(De = 1-(reflectance/100)) %>%
filter(wl == 675 | wl == 750) %>%
pivot_wider(names_from = wl, values_from = De, names_prefix = "De_", id_cols = c(PAMID, genus, species, site, habitat, replicate))
View(specslong_De)
specslong_De <- specslong %>%
mutate(De = 1-(reflectance/100)) %>%
filter(wl == 675 | wl == 750) %>%
pivot_wider(names_from = wl, values_from = De, names_prefix = "De_", id_cols = c(PAMID, genus, species, site, habitat, replicate)) %>%
mutate(A675 = De_675 - De_750) # Correct for scattering at 750 nm - IS THIS OPTIONAL?
PAM <- specslong_De %>%
left_join(PAM, .) %>%
mutate(rETR = FqFm * PAR * A675) # Relative electron transport rate adjusted for Absorbance at 675nm
# Define the Hennige et al 2008 FqFm equation
Hennige <- function(FqFmmax, Ek, x) {
model <- ((FqFmmax*Ek)*(1-exp(-x/Ek)))/x
return(model)
}
# Fit the quantum yield against the PAR_adjusted data
FqFmfits <- PAM %>%
group_by(., PAMID, genus, species, habitat, replicate) %>%
nest() %>%
mutate(fit = purrr::map(data, ~ nls_multstart(FqFm ~ Hennige(FqFmmax, Ek, x = PAR),
data = .x,
iter = 250,
start_lower = c(FqFmmax = 0.2, Ek = 5),
start_upper = c(FqFmmax = 0.85, Ek = 1380),
supp_errors = 'Y',
convergence_count = 100,
na.action = na.omit,
lower = c(FqFmmax = 0.1, Ek = 5))))
View(FqFmfits)
View(FqFmfits)
FqFminfo <- FqFmfits %>%
mutate(summary = map(fit, glance)) %>%
unnest(summary)
# get parameters
FqFmparams <- FqFmfits %>%
mutate(., p = map(fit, tidy)) %>%
unnest(p)
View(FqFminfo)
View(FqFmparams)
# get summary
FqFminfo <- FqFmfits %>%
mutate(summary = map(fit, glance)) %>%
unnest(summary)
# get parameters
FqFmparams <- FqFmfits %>%
mutate(., p = map(fit, tidy)) %>%
unnest(p)
# get confidence intervals
FqFmCI <- FqFmfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis) %>%
rename(., conf.low = X2.5.., conf.high = X97.5..) %>%
group_by(., PAMID) %>%
mutate(., term = c('FqFmmax', 'Ek')) %>%
ungroup() %>%
select(., -data, -fit)
# merge parameters and CI estimates
FqFmparams <- merge(FqFmparams, FqFmCI, by = intersect(names(FqFmparams), names(FqFmCI)))
FqFmCI <- FqFmfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis)
View(FqFmCI)
FqFmCI <- FqFmfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis) %>%
rename(., conf.low = X2.5.., conf.high = X97.5..)
FqFmCI <- FqFmfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis) %>%
rename(., conf.low = X2.5.., conf.high = X97.5..) %>%
group_by(., PAMID)
FqFmCI <- FqFmfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis) %>%
rename(., conf.low = X2.5.., conf.high = X97.5..) %>%
group_by(., PAMID) %>%
mutate(., term = c('FqFmmax', 'Ek')) %>%
ungroup(
View(FqFmCI[[6]][[1]])
FqFmCI <- FqFmfits %>%
# get summary
FqFminfo <- FqFmfits %>%
mutate(summary = map(fit, glance)) %>%
unnest(summary)
# get parameters
FqFmparams <- FqFmfits %>%
mutate(., p = map(fit, tidy)) %>%
unnest(p)
# get confidence intervals
FqFmCI <- FqFmfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis) %>%
rename(., conf.low = X2.5.., conf.high = X97.5..) %>%
group_by(., PAMID) %>%
mutate(., term = c('FqFmmax', 'Ek')) %>%
ungroup() %>%
select(., -data, -fit)
# merge parameters and CI estimates
FqFmparams <- merge(FqFmparams, FqFmCI, by = intersect(names(FqFmparams), names(FqFmCI)))
View(FqFmparams)
# AOV FqFmmax
FqFmmax <- FqFmparams %>% filter(term == "FqFmmax")
## Normality check
FqFmmax %>%
shapiro_test(estimate) # Fails SW test of normality. Move to non-parametric
## wilcox.test
FqFmmax %>%
wilcox_test(estimate ~ habitat)
### FqFmmax is signifcantly higher in cryptic samples
# AOV Ek
Ek <- FqFmparams %>% filter(term == "Ek")
## Normality check
Ek %>%
shapiro_test(estimate) # Fails SW test of normality. Move to non-parametric
## wilcox.test
Ek %>%
wilcox_test(estimate ~ habitat)
# Means and SD
FqFmfitsum <- FqFmparams %>%
group_by(habitat, term) %>%
summarise(mean = mean(estimate),
sd = sd(estimate))
FqFmfitsum %>%
pandoc.table()
# Means of parameters and sd
# --------------------------------------
#  habitat    term      mean      sd
# --------- --------- -------- ---------
#  cryptic     Ek      99.26     54.03
#
#  cryptic   FqFmmax   0.6611   0.04266
#
#  exposed     Ek      150.9     62.46
#
#  exposed   FqFmmax   0.5864   0.05241
# --------------------------------------
dplyr::select(FqFminfo, isConv, PAMID, logLik, AIC, BIC, deviance, df.residual)
# AOV FqFmmax
FqFmmax <- FqFmparams %>% filter(term == "FqFmmax")
## Normality check
FqFmmax %>%
shapiro_test(estimate) # Fails SW test of normality. Move to non-parametric
## wilcox.test
FqFmmax %>%
wilcox_test(estimate ~ habitat)
### FqFmmax is signifcantly higher in cryptic samples
# AOV Ek
Ek <- FqFmparams %>% filter(term == "Ek")
## Normality check
Ek %>%
shapiro_test(estimate) # Fails SW test of normality. Move to non-parametric
## wilcox.test
Ek %>%
wilcox_test(estimate ~ habitat)
# Means and SD
FqFmfitsum <- FqFmparams %>%
group_by(habitat, term) %>%
summarise(mean = mean(estimate),
sd = sd(estimate))
FqFmfitsum %>%
pandoc.table()
# Means of parameters and sd
# --------------------------------------
#  habitat    term      mean      sd
# --------- --------- -------- ---------
#  cryptic     Ek      99.26     54.03
#
#  cryptic   FqFmmax   0.6611   0.04266
#
#  exposed     Ek      150.9     62.46
#
#  exposed   FqFmmax   0.5864   0.05241
# --------------------------------------
View(FqFmfitsum)
## Boxplot of FqFmmax
FqFmparams %>%
filter(term == "FqFmmax") %>%
ggplot(aes(habitat, estimate)) +
geom_boxplot() +
#facet_wrap(~species, scales = "free_x") +
theme(aspect.ratio = 1) +
ylab("Fq/Fm max")
## Boxplot of Ek
FqFmparams %>%
filter(term == "Ek") %>%
ggplot(aes(habitat, estimate)) +
geom_boxplot() +
#facet_wrap(~species, scales = "free_x") +
theme(aspect.ratio = 1) +
ylab("Ek")
# Create new dataframe of the means
PAM_means <- PAM %>%
group_by(genus, species, habitat, PAR) %>%
summarise(FqFm_mean = mean(FqFm),
rETR_mean = mean(rETR),
FqFm_sd = sd(FqFm),
rETR_sd = sd(rETR),
FqFm_sem = FqFm_sd/sqrt(n()),
rETR_sem = rETR_sd/sqrt(n())) %>%
ungroup() %>%
group_by(genus, species, habitat) %>%
mutate(PAMID = group_indices()) %>%
ungroup()
# Fit to only the means for plotting
FqFmfits_means <- PAM_means %>%
group_by(PAMID, genus, species, habitat) %>%
nest() %>%
mutate(fit = purrr::map(data, ~ nls_multstart(FqFm_mean ~ Hennige(FqFmmax, Ek, x = PAR),
data = .x,
iter = 250,
start_lower = c(FqFmmax = 0.2, Ek = 5),
start_upper = c(FqFmmax = 0.85, Ek = 1380),
supp_errors = 'Y',
convergence_count = 100,
na.action = na.omit,
lower = c(FqFmmax = 0.1, Ek = 5))))
# create long PAR list for curve fitting
new_preds_means <- PAM_means %>%
do(., data.frame(PAR = seq(min(.$PAR), max(.$PAR), length.out = 250), stringsAsFactors = FALSE))
# augment predictions from fits
FqFmpreds_means <- FqFmfits_means %>%
mutate(., p = map(fit, augment, newdata = new_preds_means)) %>%
unnest(p) %>%
rename(., FqFm = .fitted) %>%
ungroup()
# Plot means
ggplot() +
geom_line(aes(PAR, FqFm, group = PAMID, col = habitat), alpha = 0.5, FqFmpreds_means) +
geom_errorbar(aes(PAR, FqFm_mean, ymin = FqFm_mean - FqFm_sem, ymax = FqFm_mean + FqFm_sem), PAM_means) +
geom_point(aes(PAR, FqFm_mean, fill = habitat), shape = 21, size = 2, PAM_means) +
facet_wrap(~ species, labeller = labeller(.multi_line = FALSE)) +
labs(x = expression(paste("E (", mu,"mol photons m"^-2*" s"^-1*")")),
y = 'Fq/Fm (dimensionless)') +
scale_colour_manual(values = c("black", "coral")) +
scale_fill_manual(values = c("black", "coral")) +
theme(legend.position = "right", aspect.ratio = 1)
# Define the Jassby and Platt 1976 model
JP <- function(x, a, Ek){
model <- a*Ek*tanh(x/Ek)
return(model)
}
ETRfits <- PAM %>%
group_by(., PAMID, genus, species, replicate, habitat) %>%
nest() %>%
mutate(fit = purrr::map(data, ~ nls_multstart(rETR ~ JP(x = PAR, a, Ek),
data = .x,
iter = 250,
start_lower = c(a = 0.05, Ek = 5),
start_upper = c(a = 0.9, Ek = 1700),
supp_errors = 'Y',
convergence_count = 100,
na.action = na.omit,
lower = c(a = 0.05, Ek = 1))))
# get summary
ETRinfo <- ETRfits %>%
mutate(summary = map(fit, glance)) %>%
unnest(summary)
# get params
ETRparams <- ETRfits %>%
mutate(., p = map(fit, tidy)) %>%
unnest(p)
# get confidence intervals
ETRCI <- ETRfits %>%
mutate(., cis = map(fit, confint2),
cis = map(cis, data.frame)) %>%
unnest(cis) %>%
rename(., conf.low = X2.5.., conf.high = X97.5..) %>%
group_by(., PAMID) %>%
mutate(., term = c('a', 'Ek')) %>%
ungroup() %>%
select(., -data, -fit)
# merge parameters and CI estimates
ETRparams <- merge(ETRparams, ETRCI, by = intersect(names(ETRparams), names(ETRCI)))
ETR_Ek_fold <- ETRparams %>%
filter(term == "Ek") %>%
group_by(habitat) %>%
mutate(n = row_number()) %>%
pivot_wider(names_from = habitat, values_from = c(estimate, std.error, statistic, p.value), id_cols = c(genus, species, n)) %>%
mutate(Ek_fold_change = (estimate_exposed - estimate_cryptic)/estimate_cryptic,
species = fct_reorder(species, Ek_fold_change, .fun = 'median'))
ggplot(ETR_Ek_fold) +
geom_boxplot(aes(species, Ek_fold_change), fill = "grey90") +
theme(aspect.ratio = 1, axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.1))
dplyr::select(ETRinfo, isConv, PAMID, logLik, AIC, BIC, deviance, df.residual)
# AOV FqFmmax
a <- ETRparams %>% filter(term == "a")
## Normality check
a %>%
shapiro_test(estimate) # Fails SW test of normality. Move to non-parametric
## wilcox.test
ETRparams %>%
wilcox_test(estimate ~ habitat)
### alpha is signifcantly different
# AOV Ek
Ek <- ETRparams %>% filter(term == "Ek")
## Normality check
Ek %>%
shapiro_test(estimate) # Fails SW test of normality. Move to non-parametric
## wilcox.test
Ek %>%
wilcox_test(estimate ~ habitat)
# Ek is significantly different
# Means and SD
ETRfitsum <- ETRparams %>%
group_by(habitat, term) %>%
summarise(mean = mean(estimate),
sd = sd(estimate))
ETRfitsum %>%
pandoc.table()
# ----------------------------------
#  habitat   term   mean      sd
# --------- ------ ------- ---------
#  cryptic    a     0.487   0.06558
#
#  cryptic    Ek    148.8    68.31
#
#  exposed    a     0.525   0.1162
#
#  exposed    Ek    204.1    75.89
# ----------------------------------
## Barplot
ETRparams %>%
filter(term == "a") %>%
ggplot(aes(habitat, estimate)) +
geom_boxplot() +
facet_wrap(~species, scales = "free_x") +
theme(aspect.ratio = 1) +
ylab("Alpha (steepness of ETR)")
ETRparams %>%
filter(term == "Ek") %>%
ggplot(aes(habitat, estimate)) +
geom_boxplot() +
facet_wrap(~species, scales = "free_x") +
theme(aspect.ratio = 1) +
ylab("Ek")
head(PAR)
PAR()
